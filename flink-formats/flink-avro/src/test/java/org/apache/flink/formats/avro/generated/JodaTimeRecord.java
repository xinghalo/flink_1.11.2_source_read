/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.apache.flink.formats.avro.generated;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class JodaTimeRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5883645863344718563L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"JodaTimeRecord\",\"namespace\":\"org.apache.flink.formats.avro.generated\",\"fields\":[{\"name\":\"type_timestamp_millis\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"type_date\",\"type\":{\"type\":\"int\",\"logicalType\":\"date\"}},{\"name\":\"type_time_millis\",\"type\":{\"type\":\"int\",\"logicalType\":\"time-millis\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<JodaTimeRecord> ENCODER =
      new BinaryMessageEncoder<JodaTimeRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<JodaTimeRecord> DECODER =
      new BinaryMessageDecoder<JodaTimeRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<JodaTimeRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<JodaTimeRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<JodaTimeRecord>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this JodaTimeRecord to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a JodaTimeRecord from a ByteBuffer. */
  public static JodaTimeRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public org.joda.time.DateTime type_timestamp_millis;
  @Deprecated public org.joda.time.LocalDate type_date;
  @Deprecated public org.joda.time.LocalTime type_time_millis;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public JodaTimeRecord() {}

  /**
   * All-args constructor.
   * @param type_timestamp_millis The new value for type_timestamp_millis
   * @param type_date The new value for type_date
   * @param type_time_millis The new value for type_time_millis
   */
  public JodaTimeRecord(org.joda.time.DateTime type_timestamp_millis, org.joda.time.LocalDate type_date, org.joda.time.LocalTime type_time_millis) {
    this.type_timestamp_millis = type_timestamp_millis;
    this.type_date = type_date;
    this.type_time_millis = type_time_millis;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return type_timestamp_millis;
    case 1: return type_date;
    case 2: return type_time_millis;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  protected static final org.apache.avro.data.TimeConversions.DateConversion DATE_CONVERSION = new org.apache.avro.data.TimeConversions.DateConversion();
  protected static final org.apache.avro.data.TimeConversions.TimeConversion TIME_CONVERSION = new org.apache.avro.data.TimeConversions.TimeConversion();
  protected static final org.apache.avro.data.TimeConversions.TimestampConversion TIMESTAMP_CONVERSION = new org.apache.avro.data.TimeConversions.TimestampConversion();
  protected static final org.apache.avro.Conversions.DecimalConversion DECIMAL_CONVERSION = new org.apache.avro.Conversions.DecimalConversion();

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      TIMESTAMP_CONVERSION,
      DATE_CONVERSION,
      TIME_CONVERSION,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: type_timestamp_millis = (org.joda.time.DateTime)value$; break;
    case 1: type_date = (org.joda.time.LocalDate)value$; break;
    case 2: type_time_millis = (org.joda.time.LocalTime)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'type_timestamp_millis' field.
   * @return The value of the 'type_timestamp_millis' field.
   */
  public org.joda.time.DateTime getTypeTimestampMillis() {
    return type_timestamp_millis;
  }

  /**
   * Sets the value of the 'type_timestamp_millis' field.
   * @param value the value to set.
   */
  public void setTypeTimestampMillis(org.joda.time.DateTime value) {
    this.type_timestamp_millis = value;
  }

  /**
   * Gets the value of the 'type_date' field.
   * @return The value of the 'type_date' field.
   */
  public org.joda.time.LocalDate getTypeDate() {
    return type_date;
  }

  /**
   * Sets the value of the 'type_date' field.
   * @param value the value to set.
   */
  public void setTypeDate(org.joda.time.LocalDate value) {
    this.type_date = value;
  }

  /**
   * Gets the value of the 'type_time_millis' field.
   * @return The value of the 'type_time_millis' field.
   */
  public org.joda.time.LocalTime getTypeTimeMillis() {
    return type_time_millis;
  }

  /**
   * Sets the value of the 'type_time_millis' field.
   * @param value the value to set.
   */
  public void setTypeTimeMillis(org.joda.time.LocalTime value) {
    this.type_time_millis = value;
  }

  /**
   * Creates a new JodaTimeRecord RecordBuilder.
   * @return A new JodaTimeRecord RecordBuilder
   */
  public static org.apache.flink.formats.avro.generated.JodaTimeRecord.Builder newBuilder() {
    return new org.apache.flink.formats.avro.generated.JodaTimeRecord.Builder();
  }

  /**
   * Creates a new JodaTimeRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new JodaTimeRecord RecordBuilder
   */
  public static org.apache.flink.formats.avro.generated.JodaTimeRecord.Builder newBuilder(org.apache.flink.formats.avro.generated.JodaTimeRecord.Builder other) {
    return new org.apache.flink.formats.avro.generated.JodaTimeRecord.Builder(other);
  }

  /**
   * Creates a new JodaTimeRecord RecordBuilder by copying an existing JodaTimeRecord instance.
   * @param other The existing instance to copy.
   * @return A new JodaTimeRecord RecordBuilder
   */
  public static org.apache.flink.formats.avro.generated.JodaTimeRecord.Builder newBuilder(org.apache.flink.formats.avro.generated.JodaTimeRecord other) {
    return new org.apache.flink.formats.avro.generated.JodaTimeRecord.Builder(other);
  }

  /**
   * RecordBuilder for JodaTimeRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<JodaTimeRecord>
    implements org.apache.avro.data.RecordBuilder<JodaTimeRecord> {

    private org.joda.time.DateTime type_timestamp_millis;
    private org.joda.time.LocalDate type_date;
    private org.joda.time.LocalTime type_time_millis;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.flink.formats.avro.generated.JodaTimeRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.type_timestamp_millis)) {
        this.type_timestamp_millis = data().deepCopy(fields()[0].schema(), other.type_timestamp_millis);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type_date)) {
        this.type_date = data().deepCopy(fields()[1].schema(), other.type_date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.type_time_millis)) {
        this.type_time_millis = data().deepCopy(fields()[2].schema(), other.type_time_millis);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing JodaTimeRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.flink.formats.avro.generated.JodaTimeRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.type_timestamp_millis)) {
        this.type_timestamp_millis = data().deepCopy(fields()[0].schema(), other.type_timestamp_millis);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type_date)) {
        this.type_date = data().deepCopy(fields()[1].schema(), other.type_date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.type_time_millis)) {
        this.type_time_millis = data().deepCopy(fields()[2].schema(), other.type_time_millis);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'type_timestamp_millis' field.
      * @return The value.
      */
    public org.joda.time.DateTime getTypeTimestampMillis() {
      return type_timestamp_millis;
    }

    /**
      * Sets the value of the 'type_timestamp_millis' field.
      * @param value The value of 'type_timestamp_millis'.
      * @return This builder.
      */
    public org.apache.flink.formats.avro.generated.JodaTimeRecord.Builder setTypeTimestampMillis(org.joda.time.DateTime value) {
      validate(fields()[0], value);
      this.type_timestamp_millis = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'type_timestamp_millis' field has been set.
      * @return True if the 'type_timestamp_millis' field has been set, false otherwise.
      */
    public boolean hasTypeTimestampMillis() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'type_timestamp_millis' field.
      * @return This builder.
      */
    public org.apache.flink.formats.avro.generated.JodaTimeRecord.Builder clearTypeTimestampMillis() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'type_date' field.
      * @return The value.
      */
    public org.joda.time.LocalDate getTypeDate() {
      return type_date;
    }

    /**
      * Sets the value of the 'type_date' field.
      * @param value The value of 'type_date'.
      * @return This builder.
      */
    public org.apache.flink.formats.avro.generated.JodaTimeRecord.Builder setTypeDate(org.joda.time.LocalDate value) {
      validate(fields()[1], value);
      this.type_date = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'type_date' field has been set.
      * @return True if the 'type_date' field has been set, false otherwise.
      */
    public boolean hasTypeDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'type_date' field.
      * @return This builder.
      */
    public org.apache.flink.formats.avro.generated.JodaTimeRecord.Builder clearTypeDate() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'type_time_millis' field.
      * @return The value.
      */
    public org.joda.time.LocalTime getTypeTimeMillis() {
      return type_time_millis;
    }

    /**
      * Sets the value of the 'type_time_millis' field.
      * @param value The value of 'type_time_millis'.
      * @return This builder.
      */
    public org.apache.flink.formats.avro.generated.JodaTimeRecord.Builder setTypeTimeMillis(org.joda.time.LocalTime value) {
      validate(fields()[2], value);
      this.type_time_millis = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'type_time_millis' field has been set.
      * @return True if the 'type_time_millis' field has been set, false otherwise.
      */
    public boolean hasTypeTimeMillis() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'type_time_millis' field.
      * @return This builder.
      */
    public org.apache.flink.formats.avro.generated.JodaTimeRecord.Builder clearTypeTimeMillis() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public JodaTimeRecord build() {
      try {
        JodaTimeRecord record = new JodaTimeRecord();
        record.type_timestamp_millis = fieldSetFlags()[0] ? this.type_timestamp_millis : (org.joda.time.DateTime) defaultValue(fields()[0], record.getConversion(0));
        record.type_date = fieldSetFlags()[1] ? this.type_date : (org.joda.time.LocalDate) defaultValue(fields()[1], record.getConversion(1));
        record.type_time_millis = fieldSetFlags()[2] ? this.type_time_millis : (org.joda.time.LocalTime) defaultValue(fields()[2], record.getConversion(2));
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<JodaTimeRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<JodaTimeRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<JodaTimeRecord>
    READER$ = (org.apache.avro.io.DatumReader<JodaTimeRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
